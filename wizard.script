board <- 1;
libs_path <- _T("~/Documents/n-ka/libs");


// armv6-m Cortex M0
// armv7e-m Cortex M4

function BeginWizard()
{
	// this is the text that will appear in the start (intro) page
	local intro_msg = _T(	"Welcome to the new N-ka application wizard!\n" +
	      		  	"It is heavily based on other wizards (esp. console)!\n" +
				"This wizard will guide you to create a new N-ka application.\n\n" +
				"Please click \"Next\" to proceed.");

	Wizard.AddInfoPage(_T("ConsoleIntro"), intro_msg);
	if (PLATFORM == PLATFORM_MSW)
	{
		libs_path = "%HOMEPATH%/n-ka/libs";
	}
	if (PLATFORM == PLATFORM_GTK)
	{
		libs_path = "~/n-ka/libs";
	}	
	if (PLATFORM == PLATFORM_MAC)
	{
		libs_path = "~/Documents/n-ka/libs";
	}
	// select project name and path
	Wizard.AddProjectPathPage();
	// select compiler and configurations
	Wizard.AddCompilerPage(_T(""), _T("*arm*"), true, true);
	Wizard.AddGenericSingleChoiceListPage(_T("Nka_board"), _T("Please select the configuration you want to use."), _T("stm32f030;stm32f318"), board);

}
//
//------------------------------------------------------------------------------
//
function OnLeave_Nka_board(fwd)
{
	if (fwd)
	{
		board = Wizard.GetListboxSelection(_T("GenericChoiceList"));
	}
	return true;
}
//
//------------------------------------------------------------------------------
//

// glede na board izberi kaj skopira
function GetFilesDir()
{
    local result;

    // depending on the source type setting, return the appropriate value.
    if (board == 0) // C source file
        result = _T("n-ka/33");
    else // C++ source file
        result = _T("tester/18");
    return result;
}
//
//------------------------------------------------------------------------------
//
function SetupProject(project)
{
	local target;
	local file;
	local i;


	// path to libraries
	libs_path = IO.SelectDirectory(_T("Select path to libraries"), _T(libs_path), true);	

// enable compiler warnings (project-wide)
   	WarningsOn(project, Wizard.GetCompilerID());
	DebugSymbolsOn(project, Wizard.GetCompilerID());
	OptimizationsOn(project, Wizard.GetCompilerID()); 

	// Add subdirectories for includes
	project.AddIncludeDir(_T("src"));
	project.AddIncludeDir(_T("h"));

	SetupCompile(project);

	// We setup the targets using SetupTarget() which is conveniently called by Code::Blocks
	// if we register this wizard as wizTarget type :)
	// This means that this very wizard can be used both as wizProject *and* as wizTarget ;)


	//configure Debug target
	target = project.GetBuildTarget(_T("Debug"));
	if (IsNull(target))
		target = project.AddBuildTarget(_T("Debug"));
	SetupTarget(target, true);

	//configure Release target
	target = project.GetBuildTarget(_T("Release"));
	if (IsNull(target))
		target = project.AddBuildTarget(_T("Release"));
	SetupTarget(target, false);


	// all done!
	return true;
}
//
//------------------------------------------------------------------------------
//
function SetupTarget(target,is_debug)
{
	if (IsNull(target))
		return false;

	local projectname = GetProjectManager().GetActiveProject().GetTitle();
	target.SetTargetType(ttConsoleOnly);

	target.SetTargetFilenameGenerationPolicy(1, 1);
	target.SetOutputFilename(target.GetTitle() + wxFILE_SEP_PATH + projectname + _T(".elf"));

	target.SetObjectOutput(target.GetTitle());

	switch(board) {
		case 0:
			target.AddLinkLib(_T("stm32f0"));
			break;
		case 1:
			target.AddLinkLib(_T("stm32f3"));
	}
	target.AddLinkLib(_T("pins"));
	target.AddLinkLib(_T("timing"));
	target.AddLinkLib(_T("tft"));

	target.AddCommandsAfterBuild(_T("arm-none-eabi-objcopy -O ihex ") + target.GetTitle() + wxFILE_SEP_PATH + projectname + _T(".elf ") + target.GetTitle() + wxFILE_SEP_PATH + projectname + _T(".hex"));
	target.AddCommandsAfterBuild(_T("arm-none-eabi-objcopy -O binary ") + target.GetTitle() + wxFILE_SEP_PATH + projectname + _T(".elf ") + target.GetTitle() + wxFILE_SEP_PATH + projectname + _T(".bin"));

	if (is_debug)
	{
		// enable debugging symbols for this target
		DebugSymbolsOn(target, Wizard.GetCompilerID());
	}
	return true;
}


function SetupCompile(project)
{


	switch(board) {
		case 0:
			project.AddCompilerOption(_T("-g -O2 -Wall -T" + libs_path + "/stm32f030c6_flash.ld --specs=nosys.specs -mlittle-endian -mthumb -mcpu=cortex-m0 -mthumb-interwork -mfloat-abi=soft -I" + libs_path + " -I" + libs_path + "/inc -I" + libs_path + "/inc/core -I" + libs_path + "/inc/peripherals"));
			project.AddLinkerOption(_T("-T" + libs_path + "/stm32f030c6_flash.ld --specs=nosys.specs -mthumb -mcpu=cortex-m0"));
			break;
		case 1:
			project.AddCompilerOption(_T("-g -O2 -Wall -T" + libs_path + "/stm32f318_flash.ld --specs=nosys.specs -mlittle-endian -mthumb -mcpu=cortex-m4 -mthumb-interwork -mfloat-abi=hard -mfpu=fpv4-sp-d16 -I" + libs_path + " -I" + libs_path + "/inc -I" + libs_path + "/inc/core -I" + libs_path + "/inc/peripherals"));
			project.AddLinkerOption(_T("-T" + libs_path + "/stm32f030c6_flash.ld --specs=nosys.specs -mthumb -mcpu=cortex-m4x"));
	}
}
